name: CI

on:
  pull_request:
    branches:
      - "*"

  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go 1.20
        id: go
        uses: actions/setup-go@v2
        with:
          go-version: 1.20.4
      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: latest
          qemu-version: latest
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: Build images
        run: |
          set -x
          git fetch origin
          tag="$(git describe --tags)"

          echo "building images..."
          go mod vendor
          echo "docker build -t ghcr.io/kilnfi/carina:controller-${tag} . "
          docker build -t "ghcr.io/kilnfi/carina:controller-${tag}" .

          cd scheduler
          go mod vendor
          echo "docker build -t ghcr.io/kilnfi/carina:scheduler-${tag} ."
          docker build -t "ghcr.io/kilnfi/carina:scheduler-${tag}" .
      - name: Test Kubernetes
        if: github.ref != 'refs/heads/main'
        run: |
          set -x
          git fetch origin
          tag="$(git describe --tags)"

          # Cluster
          curl -o k3d https://github.com/k3d-io/k3d/releases/download/v5.5.1/k3d-linux-arm64
          chmod +x k3d
          K3D_FIX_MOUNTS=1 k3d cluster create -i rancher/k3s:v1.25.7-k3s1 test
          k3d kubeconfig get test > kubeconfig-test
          export KUBECONFIG=$(pwd)/kubeconfig-test

          # Carina install
          k3d image import -c test "ghcr.io/kilnfi/carina:controller-${tag}"
          k3d image import -c test "ghcr.io/kilnfi/carina:scheduler-${tag}" .
          docker exec -t k3d-test-server-0 kubectl create ns carina
          docker exec -t k3d-test-server-0 sh -c 'for i in $(seq 1 5); do truncate --size=1G /dev/shm/disk$i.device && losetup -f /dev/shm/disk$i.device; done'
          sed -e 's/__TAG__/'"${tag}"/' .github/kiln-values.yaml
          helm upgrade --install -n carina carina-csi-driver charts/ -f .github/kiln-values.yaml

          # Carina test
          docker exec -t k3d-test-server-0 kubectl wait po -n carina -l app=csi-carina-node --for=condition=ready --timeout=200s
          helm test -n carina carina-csi-driver
          docker exec -t k3d-test-server-0 kubectl wait -n carina --for=jsonpath='{.status.phase}'=Bound pvc/carina-vg-ssd-testpvc --timeout=200s
          docker exec -t k3d-test-server-0 kubectl wait -n carina --for=condition=ready po -l storageclass=carina-vg-ssd --timeout=200s
      - name: Push image
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: |
          set -x
          git fetch origin
          tag="$(git describe --tags)"

          docker push "ghcr.io/kilnfi/carina:controller-${tag}"
          docker push "ghcr.io/kilnfi/carina:scheduler-${tag}"

  helm:
    name: Helm chart
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Helm
        uses: azure/setup-helm@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push chart
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: |
          set -x
          git fetch origin
          tag="$(git describe --tags)"

          sed -e 's/^name: carina-csi-driver/name: carina/' charts/Chart.yaml
          helm package charts --version "${tag}"
          HELM_EXPERIMENTAL_OCI=1 helm push "carina-${tag}.tgz" "oci://ghcr.io/kilnfi"

{{- $initiMage := include "nodeInitImage" . -}}
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ .Values.node.name }}
  namespace: {{ .Release.Namespace }}
{{ include "carina-node.labels" . | indent 2 }}
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: {{ .Values.node.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Values.node.name }}
  template:
    metadata:
{{ include "carina-node.labels" . | indent 6 }}
{{- with .Values.node.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      hostNetwork: {{ .Values.node.hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: {{ .Values.serviceAccount.node }}
      affinity:
        nodeAffinity:
{{ toYaml .Values.node.nodeAffinity | indent 10 }}
{{- with .Values.node.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      {{- include "carina.pullSecrets" . | indent 6 }}
{{- if .Values.node.initContainer }}        
      initContainers:
{{- range .Values.node.initContainer.modprobe}}
        - name: {{ kebabcase   . | }}
          securityContext:
            privileged: true
          image: {{ $initiMage  }}
          command: ["sh", "-c","modprobe {{. |}}"] 
          volumeMounts:
            - mountPath: /lib/modules
              name: modules
{{- end}}
{{- end}}               
      containers:
{{- if .Values.image.livenessProbe }}      
        - name: liveness-probe
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
{{- if hasPrefix "/" .Values.image.livenessProbe.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- else }}
          image: "{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- end }}
          args:
            - --csi-address=/csi/csi.sock
            - --probe-timeout=3s
            - --health-port={{ .Values.node.livenessProbe.healthPort }}
            - --v={{ .Values.node.logLevel }}
          resources: {{- toYaml .Values.node.resources.livenessProbe | nindent 12 }}
{{- end }}          
        - name: node-driver-registrar
{{- if hasPrefix "/" .Values.image.nodeDriverRegistrar.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
{{- else }}
          image: "{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
{{- end }}
          args:
            - --csi-address=$(ADDRESS)
            - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
            - --v={{ .Values.node.logLevel }}
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: {{ .Values.node.kubelet }}/plugins/{{ .Values.driver.name }}/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName  
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
          resources: {{- toYaml .Values.node.resources.nodeDriverRegistrar | nindent 12 }}
        - name: csi-carina-node
{{- if hasPrefix "/" .Values.image.carina.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.carina.repository }}:{{ .Values.image.carina.tag }}"
{{- else }}
          image: "{{ .Values.image.carina.repository }}:{{ .Values.image.carina.tag }}"
{{- end }}
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          command: ["carina-node"]  
          args:
            - "--csi-address=$(ADDRESS)"
            - "--metrics-addr=:{{ .Values.node.metricsPort }}"
            - "--http-addr=:{{ .Values.node.httpPort }}"  
          ports:
            - containerPort: {{ .Values.node.httpPort }}
              name: http
            - containerPort: {{ .Values.node.metricsPort }}
              name: metrics  
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: ADDRESS
              value: /csi/csi.sock
          imagePullPolicy: {{ .Values.image.carina.pullPolicy }}
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: mountpoint-dir
              mountPath: {{ .Values.node.kubelet }}/pods
              mountPropagation: Bidirectional
            - name: plugin-dir
              mountPath: {{ .Values.node.kubelet }}/plugins
              mountPropagation: Bidirectional
            - name: device-plugin
              mountPath: {{ .Values.node.kubelet }}/device-plugins
              mountPropagation: Bidirectional
            - name: host-sys
              mountPath: /sys/fs/cgroup
            - name: host-block
              mountPath: /sys/block
            {{- range .Values.node.initContainer.modprobe}}  
            {{- if eq  .  "bcache" }}
            - name: host-bcache
              mountPath: /sys/fs/bcache
            {{- end }} 
            {{- end }}  
            - name: host-dev
              mountPath: /dev
            - name: host-mount
              mountPath: /run/mount
            - name: config
              mountPath: {{ .Values.node.configDir }}
            - name: log-dir
              mountPath: {{ .Values.node.logDir }}
          resources: {{- toYaml .Values.node.resources.carina | nindent 12 }}
      volumes:
        - hostPath:
            path: {{ .Values.node.kubelet }}/plugins/{{ .Values.driver.name }}
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: {{ .Values.node.kubelet }}/pods
            type: DirectoryOrCreate
          name: mountpoint-dir
        - hostPath:
            path: {{ .Values.node.kubelet }}/plugins_registry/
            type: DirectoryOrCreate
          name: registration-dir
        - name: log-dir
          hostPath:
            path: {{ .Values.node.logDir }}
            type: DirectoryOrCreate    
        - name: plugin-dir
          hostPath:
            path: {{ .Values.node.kubelet }}/plugins
            type: Directory
        - name: device-plugin
          hostPath:
            path: {{ .Values.node.kubelet }}/device-plugins
            type: Directory
        - name: host-sys
          hostPath:
            path: /sys/fs/cgroup
        - name: host-block
          hostPath:
            path: /sys/block
        {{- range .Values.node.initContainer.modprobe}}  
            {{- if eq  .  "bcache" }}
        - name: host-bcache
          hostPath:
            path: /sys/fs/bcache
            {{- end }} 
        {{- end }}       
        - name: modules
          hostPath:
            path: /lib/modules
        - name: host-dev
          hostPath:
            path: /dev
        - name: host-mount
          hostPath:
            path: /run/mount
        - name: config
          configMap:
            name: carina-csi-config

